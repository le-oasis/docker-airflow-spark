# Welcome to the Modern Data Lake.
# Feel free to modify this file to suit your needs..
---
version: '3'
x-airflow-common:
  &airflow-common
  # uncomment the image tag to use a specific image
  # comment the build & context if you want to use the built image.
  # image: 'air-prune'
  build:
    context: ./airflow-setup
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ../dags:/opt/airflow/dags
    - ../plugins:/opt/airflow/plugins
    - ../logs:/opt/airflow/logs
    - ../spark/app:/usr/local/spark/app 
    - ../spark/resources:/usr/local/spark/resources 
    - ../spark/conf:/spark/spark-3.2.0-bin-hadoop3.2/conf
  user: "${AIRFLOW_UID:-50000}:$AIRFLOW_GID:-50000}"
  env_file:
    - .env
  networks:
    - oasiscorp
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  # Postgre DB
  postgres:
    hostname: oasispostgres
    container_name: postgres_container
    build:
      context: ./postgres
      dockerfile: Dockerfile
    networks:
     - oasiscorp
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ${PWD}/postgres/create_ranger_users.sql:/docker-entrypoint-initdb.d/create_ranger_users.sql
    env_file:
      - .env
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    

  # Namenode: HDFS
  namenode:
      image: dimeji/hadoop-namenode:latest
      container_name: hadoop-namenode
      volumes:
        - namenode:/hadoop/dfs/name
      environment:
        - CLUSTER_NAME=test
      env_file:
        - ${PWD}/hadoop-hive.env
      ports:
        - "50070:50070"
      networks:
        - oasiscorp

  # Datanode: HDFS      
  datanode:
      image: dimeji/hadoop-datanode:latest
      container_name: hadoop-datanode
      volumes:
        - datanode:/hadoop/dfs/data
      env_file:
        - ${PWD}/hadoop-hive.env
      environment:
        SERVICE_PRECONDITION: "namenode:50070"
      ports:
        - "50075:50075"
      depends_on:
      - namenode
      networks:
        - oasiscorp

  # Hive: A Hive Metastore and a Hive Metastore Server
  hive:
      image: dimeji/hive-metastore
      hostname: hive
      container_name: hive-metastore
      env_file:
        - ${PWD}/hadoop-hive.env
      command: /opt/hive/bin/hive --service metastore
      environment:
        SERVICE_PRECONDITION: "namenode:50070 datanode:50075 oasispostgres:5432"
      ports:
        - "9083:9083"
      depends_on:
        - namenode
        - datanode
      networks:
        - oasiscorp
      restart: on-failure

      # /opt/hive/conf

  # Hive Server: A Hive Metastore and a Hive Metastore Server    
  hive-server:
      image: dimeji/hive-server
      container_name: hive-server
      env_file:
        - ${PWD}/hadoop-hive.env
      environment:
        HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive/metastore"
        SERVICE_PRECONDITION: "hive:9083"
      ports:
        - "10000:10000"
      depends_on:
        - hive
      networks:
        - oasiscorp


  # Jupyter notebook
  jupyter-spark:
        hostname: myjupyter
        container_name: jupyter_container
        image: 'jupyter/pyspark-notebook:spark-3.2.0'
        networks:
            - oasiscorp
        ports:
          - "8888:8888"
        volumes:
          - ../notebooks:/home/jovyan/work/notebooks/
          - ../spark/resources/data:/home/jovyan/work/data/
          - ../spark/resources/jars:/home/jovyan/work/jars/
          - ../spark/conf:/usr/local/spark/conf
        restart: always
        depends_on:
                - postgres


  # # Zookeeper: A configuration Manager for NiFi
  # zookeeper:
  #       hostname: myzookeeper
  #       container_name: zookeeper_container
  #       image: 'bitnami/zookeeper:3.7.0'  # latest image as of 2021-11-08.
  #       environment:
  #           - ALLOW_ANONYMOUS_LOGIN=yes
  #       networks:
  #           - oasiscorp
  #       restart: always

  # # Apache Nifi: Data extraction, Transformation and load service.
  # nifi:
  #       hostname: mynifi
  #       container_name: nifi_container
  #       image: 'apache/nifi:1.15.0'  # latest image as of 2021-11-08.
  #       ports:
  #           - '8091:8080'
  #       networks:
  #           - oasiscorp
  #       volumes:
  #           - nifi-database_repository:/opt/nifi/nifi-current/database_repository
  #           - nifi-flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
  #           - nifi-content_repository:/opt/nifi/nifi-current/content_repository
  #           - nifi-provenance_repository:/opt/nifi/nifi-current/provenance_repository
  #           - nifi-conf:/opt/nifi/nifi-current/conf
  #           - nifi-state:/opt/nifi/nifi-current/state
  #           - ../nifi/logs:/opt/nifi/nifi-current/logs
  #           - ../nifi/jdbc:/opt/nifi/nifi-current/jdbc
  #           - ../nifi/credentials:/opt/nifi/nifi-current/credentials
  #       env_file:
  #           - ./.env
  #       restart: on-failure
  #       healthcheck:
  #           test: ["CMD", "curl", "-f", "http://mynifi:8080/nifi/"]
  #           interval: 30s
  #           timeout: 20s
  #           retries: 3

  # # Nifi-Registry: Version control for Nifi Flows.
  # registry:
  #       hostname: myregistry
  #       container_name: registry_container
  #       image: 'apache/nifi-registry:latest'  
  #       restart: always
  #       ports:
  #           - "18080:18080"
  #       environment:
  #           - LOG_LEVEL=INFO
  #           - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
  #           - NIFI_REGISTRY_FLOW_PROVIDER=file
  #           - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
  #       volumes:
  #           - ../nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
  #           - ../nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
  #       networks:
  #           - oasiscorp
  #       healthcheck:
  #           test: ["CMD", "curl", "-f", "http://myregistry:18080/nifi-registry/"]
  #           interval: 30s
  #           timeout: 20s
  #           retries: 3


  # Redis DB
  redis:
    image: 'redis:latest'
    container_name: redis
    networks:
      - oasiscorp
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # Airflow Web UI
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: webserver
    ports:
        - '8085:8080'
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8085/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: scheduler
    restart: always

  # Airflow Worker 
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: celery-worker
    restart: always

  # Airflow DB
  airflow-init:
    <<: *airflow-common
    command: version
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}



# Volumes 
volumes:
  postgres-db-volume:
  namenode:
  datanode:


# Network Bridge Connection
networks:
  oasiscorp:
    driver: bridge